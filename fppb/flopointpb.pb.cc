// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flopointpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flopointpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace flopointpb {

namespace {

const ::google::protobuf::Descriptor* FloPointWaveform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointWaveform_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointWaveform_Waveform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointWaveform_Waveform_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointWaveform_Jitter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointWaveform_Jitter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointWaveform_Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointWaveform_Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointWaveform_Temp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointWaveform_Temp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointWaveform_Volt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointWaveform_Volt_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointWaveform_CompileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointWaveform_CompileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointWaveform_Count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointWaveform_Count_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FloPointWaveform_TimeSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FloPointWaveform_TempSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FloPointWaveform_VoltSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FloPointWaveform_CountType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_flopointpb_2eproto() {
  protobuf_AddDesc_flopointpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "flopointpb.proto");
  GOOGLE_CHECK(file != NULL);
  FloPointWaveform_descriptor_ = file->message_type(0);
  static const int FloPointWaveform_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, waveform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, jitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, time_reading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, temp_reading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, volt_reading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, compile_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, dipswitches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, count_),
  };
  FloPointWaveform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointWaveform_descriptor_,
      FloPointWaveform::default_instance_,
      FloPointWaveform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointWaveform));
  FloPointWaveform_Waveform_descriptor_ = FloPointWaveform_descriptor_->nested_type(0);
  static const int FloPointWaveform_Waveform_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Waveform, wheight_),
  };
  FloPointWaveform_Waveform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointWaveform_Waveform_descriptor_,
      FloPointWaveform_Waveform::default_instance_,
      FloPointWaveform_Waveform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Waveform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Waveform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointWaveform_Waveform));
  FloPointWaveform_Jitter_descriptor_ = FloPointWaveform_descriptor_->nested_type(1);
  static const int FloPointWaveform_Jitter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Jitter, jheight_),
  };
  FloPointWaveform_Jitter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointWaveform_Jitter_descriptor_,
      FloPointWaveform_Jitter::default_instance_,
      FloPointWaveform_Jitter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Jitter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Jitter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointWaveform_Jitter));
  FloPointWaveform_Time_descriptor_ = FloPointWaveform_descriptor_->nested_type(2);
  static const int FloPointWaveform_Time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Time, time_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Time, time_source_),
  };
  FloPointWaveform_Time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointWaveform_Time_descriptor_,
      FloPointWaveform_Time::default_instance_,
      FloPointWaveform_Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointWaveform_Time));
  FloPointWaveform_Temp_descriptor_ = FloPointWaveform_descriptor_->nested_type(3);
  static const int FloPointWaveform_Temp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Temp, temp_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Temp, temp_source_),
  };
  FloPointWaveform_Temp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointWaveform_Temp_descriptor_,
      FloPointWaveform_Temp::default_instance_,
      FloPointWaveform_Temp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Temp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Temp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointWaveform_Temp));
  FloPointWaveform_Volt_descriptor_ = FloPointWaveform_descriptor_->nested_type(4);
  static const int FloPointWaveform_Volt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Volt, volt_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Volt, volt_source_),
  };
  FloPointWaveform_Volt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointWaveform_Volt_descriptor_,
      FloPointWaveform_Volt::default_instance_,
      FloPointWaveform_Volt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Volt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Volt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointWaveform_Volt));
  FloPointWaveform_CompileInfo_descriptor_ = FloPointWaveform_descriptor_->nested_type(5);
  static const int FloPointWaveform_CompileInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_CompileInfo, compiler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_CompileInfo, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_CompileInfo, operating_system_),
  };
  FloPointWaveform_CompileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointWaveform_CompileInfo_descriptor_,
      FloPointWaveform_CompileInfo::default_instance_,
      FloPointWaveform_CompileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_CompileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_CompileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointWaveform_CompileInfo));
  FloPointWaveform_Count_descriptor_ = FloPointWaveform_descriptor_->nested_type(6);
  static const int FloPointWaveform_Count_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Count, count_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Count, count_type_),
  };
  FloPointWaveform_Count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointWaveform_Count_descriptor_,
      FloPointWaveform_Count::default_instance_,
      FloPointWaveform_Count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointWaveform_Count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointWaveform_Count));
  FloPointWaveform_TimeSource_descriptor_ = FloPointWaveform_descriptor_->enum_type(0);
  FloPointWaveform_TempSource_descriptor_ = FloPointWaveform_descriptor_->enum_type(1);
  FloPointWaveform_VoltSource_descriptor_ = FloPointWaveform_descriptor_->enum_type(2);
  FloPointWaveform_CountType_descriptor_ = FloPointWaveform_descriptor_->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_flopointpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointWaveform_descriptor_, &FloPointWaveform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointWaveform_Waveform_descriptor_, &FloPointWaveform_Waveform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointWaveform_Jitter_descriptor_, &FloPointWaveform_Jitter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointWaveform_Time_descriptor_, &FloPointWaveform_Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointWaveform_Temp_descriptor_, &FloPointWaveform_Temp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointWaveform_Volt_descriptor_, &FloPointWaveform_Volt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointWaveform_CompileInfo_descriptor_, &FloPointWaveform_CompileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointWaveform_Count_descriptor_, &FloPointWaveform_Count::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_flopointpb_2eproto() {
  delete FloPointWaveform::default_instance_;
  delete FloPointWaveform_reflection_;
  delete FloPointWaveform_Waveform::default_instance_;
  delete FloPointWaveform_Waveform_reflection_;
  delete FloPointWaveform_Jitter::default_instance_;
  delete FloPointWaveform_Jitter_reflection_;
  delete FloPointWaveform_Time::default_instance_;
  delete FloPointWaveform_Time_reflection_;
  delete FloPointWaveform_Temp::default_instance_;
  delete FloPointWaveform_Temp_reflection_;
  delete FloPointWaveform_Volt::default_instance_;
  delete FloPointWaveform_Volt_reflection_;
  delete FloPointWaveform_CompileInfo::default_instance_;
  delete FloPointWaveform_CompileInfo_reflection_;
  delete FloPointWaveform_Count::default_instance_;
  delete FloPointWaveform_Count_reflection_;
}

void protobuf_AddDesc_flopointpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020flopointpb.proto\022\nflopointpb\"\216\t\n\020FloPo"
    "intWaveform\022\014\n\004name\030\001 \002(\t\0227\n\010waveform\030\002 "
    "\002(\0132%.flopointpb.FloPointWaveform.Wavefo"
    "rm\0223\n\006jitter\030\003 \001(\0132#.flopointpb.FloPoint"
    "Waveform.Jitter\0227\n\014time_reading\030\004 \003(\0132!."
    "flopointpb.FloPointWaveform.Time\0227\n\014temp"
    "_reading\030\005 \003(\0132!.flopointpb.FloPointWave"
    "form.Temp\0227\n\014volt_reading\030\006 \003(\0132!.flopoi"
    "ntpb.FloPointWaveform.Volt\022>\n\014compile_in"
    "fo\030\007 \001(\0132(.flopointpb.FloPointWaveform.C"
    "ompileInfo\022\023\n\013dipswitches\030\010 \001(\005\0221\n\005count"
    "\030\t \003(\0132\".flopointpb.FloPointWaveform.Cou"
    "nt\032\037\n\010Waveform\022\023\n\007wheight\030\001 \003(\005B\002\020\001\032\035\n\006J"
    "itter\022\023\n\007jheight\030\001 \003(\005B\002\020\001\032X\n\004Time\022\022\n\nti"
    "me_point\030\001 \002(\003\022<\n\013time_source\030\002 \002(\0162\'.fl"
    "opointpb.FloPointWaveform.TimeSource\032X\n\004"
    "Temp\022\022\n\ntemp_point\030\001 \002(\005\022<\n\013temp_source\030"
    "\002 \002(\0162\'.flopointpb.FloPointWaveform.Temp"
    "Source\032X\n\004Volt\022\022\n\nvolt_point\030\001 \002(\005\022<\n\013vo"
    "lt_source\030\002 \002(\0162\'.flopointpb.FloPointWav"
    "eform.VoltSource\032G\n\013CompileInfo\022\020\n\010compi"
    "ler\030\001 \002(\t\022\014\n\004date\030\002 \001(\t\022\030\n\020operating_sys"
    "tem\030\003 \001(\t\032X\n\005Count\022\023\n\013count_value\030\001 \002(\005\022"
    ":\n\ncount_type\030\002 \002(\0162&.flopointpb.FloPoin"
    "tWaveform.CountType\"0\n\nTimeSource\022\n\n\006CLO"
    "CK0\020\000\022\n\n\006CLOCK1\020\001\022\n\n\006CLOCK2\020\002\"0\n\nTempSou"
    "rce\022\n\n\006THERM0\020\000\022\n\n\006THERM1\020\001\022\n\n\006THERM2\020\002\""
    "0\n\nVoltSource\022\n\n\006VOLTM0\020\000\022\n\n\006VOLTM1\020\001\022\n\n"
    "\006VOLTM2\020\002\"D\n\tCountType\022\020\n\014MESSAGECOUNT\020\000"
    "\022\n\n\006UPTIME\020\001\022\r\n\tBOOTCYCLE\020\002\022\n\n\006COUNT3\020\003", 1199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flopointpb.proto", &protobuf_RegisterTypes);
  FloPointWaveform::default_instance_ = new FloPointWaveform();
  FloPointWaveform_Waveform::default_instance_ = new FloPointWaveform_Waveform();
  FloPointWaveform_Jitter::default_instance_ = new FloPointWaveform_Jitter();
  FloPointWaveform_Time::default_instance_ = new FloPointWaveform_Time();
  FloPointWaveform_Temp::default_instance_ = new FloPointWaveform_Temp();
  FloPointWaveform_Volt::default_instance_ = new FloPointWaveform_Volt();
  FloPointWaveform_CompileInfo::default_instance_ = new FloPointWaveform_CompileInfo();
  FloPointWaveform_Count::default_instance_ = new FloPointWaveform_Count();
  FloPointWaveform::default_instance_->InitAsDefaultInstance();
  FloPointWaveform_Waveform::default_instance_->InitAsDefaultInstance();
  FloPointWaveform_Jitter::default_instance_->InitAsDefaultInstance();
  FloPointWaveform_Time::default_instance_->InitAsDefaultInstance();
  FloPointWaveform_Temp::default_instance_->InitAsDefaultInstance();
  FloPointWaveform_Volt::default_instance_->InitAsDefaultInstance();
  FloPointWaveform_CompileInfo::default_instance_->InitAsDefaultInstance();
  FloPointWaveform_Count::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_flopointpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_flopointpb_2eproto {
  StaticDescriptorInitializer_flopointpb_2eproto() {
    protobuf_AddDesc_flopointpb_2eproto();
  }
} static_descriptor_initializer_flopointpb_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FloPointWaveform_TimeSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_TimeSource_descriptor_;
}
bool FloPointWaveform_TimeSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FloPointWaveform_TimeSource FloPointWaveform::CLOCK0;
const FloPointWaveform_TimeSource FloPointWaveform::CLOCK1;
const FloPointWaveform_TimeSource FloPointWaveform::CLOCK2;
const FloPointWaveform_TimeSource FloPointWaveform::TimeSource_MIN;
const FloPointWaveform_TimeSource FloPointWaveform::TimeSource_MAX;
const int FloPointWaveform::TimeSource_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FloPointWaveform_TempSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_TempSource_descriptor_;
}
bool FloPointWaveform_TempSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FloPointWaveform_TempSource FloPointWaveform::THERM0;
const FloPointWaveform_TempSource FloPointWaveform::THERM1;
const FloPointWaveform_TempSource FloPointWaveform::THERM2;
const FloPointWaveform_TempSource FloPointWaveform::TempSource_MIN;
const FloPointWaveform_TempSource FloPointWaveform::TempSource_MAX;
const int FloPointWaveform::TempSource_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FloPointWaveform_VoltSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_VoltSource_descriptor_;
}
bool FloPointWaveform_VoltSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FloPointWaveform_VoltSource FloPointWaveform::VOLTM0;
const FloPointWaveform_VoltSource FloPointWaveform::VOLTM1;
const FloPointWaveform_VoltSource FloPointWaveform::VOLTM2;
const FloPointWaveform_VoltSource FloPointWaveform::VoltSource_MIN;
const FloPointWaveform_VoltSource FloPointWaveform::VoltSource_MAX;
const int FloPointWaveform::VoltSource_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FloPointWaveform_CountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_CountType_descriptor_;
}
bool FloPointWaveform_CountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FloPointWaveform_CountType FloPointWaveform::MESSAGECOUNT;
const FloPointWaveform_CountType FloPointWaveform::UPTIME;
const FloPointWaveform_CountType FloPointWaveform::BOOTCYCLE;
const FloPointWaveform_CountType FloPointWaveform::COUNT3;
const FloPointWaveform_CountType FloPointWaveform::CountType_MIN;
const FloPointWaveform_CountType FloPointWaveform::CountType_MAX;
const int FloPointWaveform::CountType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FloPointWaveform_Waveform::kWheightFieldNumber;
#endif  // !_MSC_VER

FloPointWaveform_Waveform::FloPointWaveform_Waveform()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointWaveform.Waveform)
}

void FloPointWaveform_Waveform::InitAsDefaultInstance() {
}

FloPointWaveform_Waveform::FloPointWaveform_Waveform(const FloPointWaveform_Waveform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointWaveform.Waveform)
}

void FloPointWaveform_Waveform::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointWaveform_Waveform::~FloPointWaveform_Waveform() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointWaveform.Waveform)
  SharedDtor();
}

void FloPointWaveform_Waveform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointWaveform_Waveform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointWaveform_Waveform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_Waveform_descriptor_;
}

const FloPointWaveform_Waveform& FloPointWaveform_Waveform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointWaveform_Waveform* FloPointWaveform_Waveform::default_instance_ = NULL;

FloPointWaveform_Waveform* FloPointWaveform_Waveform::New() const {
  return new FloPointWaveform_Waveform;
}

void FloPointWaveform_Waveform::Clear() {
  wheight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointWaveform_Waveform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointWaveform.Waveform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 wheight = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wheight())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_wheight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointWaveform.Waveform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointWaveform.Waveform)
  return false;
#undef DO_
}

void FloPointWaveform_Waveform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointWaveform.Waveform)
  // repeated int32 wheight = 1 [packed = true];
  if (this->wheight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_wheight_cached_byte_size_);
  }
  for (int i = 0; i < this->wheight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->wheight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointWaveform.Waveform)
}

::google::protobuf::uint8* FloPointWaveform_Waveform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointWaveform.Waveform)
  // repeated int32 wheight = 1 [packed = true];
  if (this->wheight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _wheight_cached_byte_size_, target);
  }
  for (int i = 0; i < this->wheight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->wheight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointWaveform.Waveform)
  return target;
}

int FloPointWaveform_Waveform::ByteSize() const {
  int total_size = 0;

  // repeated int32 wheight = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->wheight_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wheight(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _wheight_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointWaveform_Waveform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointWaveform_Waveform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointWaveform_Waveform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointWaveform_Waveform::MergeFrom(const FloPointWaveform_Waveform& from) {
  GOOGLE_CHECK_NE(&from, this);
  wheight_.MergeFrom(from.wheight_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointWaveform_Waveform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointWaveform_Waveform::CopyFrom(const FloPointWaveform_Waveform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointWaveform_Waveform::IsInitialized() const {

  return true;
}

void FloPointWaveform_Waveform::Swap(FloPointWaveform_Waveform* other) {
  if (other != this) {
    wheight_.Swap(&other->wheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointWaveform_Waveform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointWaveform_Waveform_descriptor_;
  metadata.reflection = FloPointWaveform_Waveform_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointWaveform_Jitter::kJheightFieldNumber;
#endif  // !_MSC_VER

FloPointWaveform_Jitter::FloPointWaveform_Jitter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointWaveform.Jitter)
}

void FloPointWaveform_Jitter::InitAsDefaultInstance() {
}

FloPointWaveform_Jitter::FloPointWaveform_Jitter(const FloPointWaveform_Jitter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointWaveform.Jitter)
}

void FloPointWaveform_Jitter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointWaveform_Jitter::~FloPointWaveform_Jitter() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointWaveform.Jitter)
  SharedDtor();
}

void FloPointWaveform_Jitter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointWaveform_Jitter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointWaveform_Jitter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_Jitter_descriptor_;
}

const FloPointWaveform_Jitter& FloPointWaveform_Jitter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointWaveform_Jitter* FloPointWaveform_Jitter::default_instance_ = NULL;

FloPointWaveform_Jitter* FloPointWaveform_Jitter::New() const {
  return new FloPointWaveform_Jitter;
}

void FloPointWaveform_Jitter::Clear() {
  jheight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointWaveform_Jitter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointWaveform.Jitter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 jheight = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jheight())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_jheight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointWaveform.Jitter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointWaveform.Jitter)
  return false;
#undef DO_
}

void FloPointWaveform_Jitter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointWaveform.Jitter)
  // repeated int32 jheight = 1 [packed = true];
  if (this->jheight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jheight_cached_byte_size_);
  }
  for (int i = 0; i < this->jheight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->jheight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointWaveform.Jitter)
}

::google::protobuf::uint8* FloPointWaveform_Jitter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointWaveform.Jitter)
  // repeated int32 jheight = 1 [packed = true];
  if (this->jheight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _jheight_cached_byte_size_, target);
  }
  for (int i = 0; i < this->jheight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->jheight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointWaveform.Jitter)
  return target;
}

int FloPointWaveform_Jitter::ByteSize() const {
  int total_size = 0;

  // repeated int32 jheight = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->jheight_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jheight(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _jheight_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointWaveform_Jitter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointWaveform_Jitter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointWaveform_Jitter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointWaveform_Jitter::MergeFrom(const FloPointWaveform_Jitter& from) {
  GOOGLE_CHECK_NE(&from, this);
  jheight_.MergeFrom(from.jheight_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointWaveform_Jitter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointWaveform_Jitter::CopyFrom(const FloPointWaveform_Jitter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointWaveform_Jitter::IsInitialized() const {

  return true;
}

void FloPointWaveform_Jitter::Swap(FloPointWaveform_Jitter* other) {
  if (other != this) {
    jheight_.Swap(&other->jheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointWaveform_Jitter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointWaveform_Jitter_descriptor_;
  metadata.reflection = FloPointWaveform_Jitter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointWaveform_Time::kTimePointFieldNumber;
const int FloPointWaveform_Time::kTimeSourceFieldNumber;
#endif  // !_MSC_VER

FloPointWaveform_Time::FloPointWaveform_Time()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointWaveform.Time)
}

void FloPointWaveform_Time::InitAsDefaultInstance() {
}

FloPointWaveform_Time::FloPointWaveform_Time(const FloPointWaveform_Time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointWaveform.Time)
}

void FloPointWaveform_Time::SharedCtor() {
  _cached_size_ = 0;
  time_point_ = GOOGLE_LONGLONG(0);
  time_source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointWaveform_Time::~FloPointWaveform_Time() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointWaveform.Time)
  SharedDtor();
}

void FloPointWaveform_Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointWaveform_Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointWaveform_Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_Time_descriptor_;
}

const FloPointWaveform_Time& FloPointWaveform_Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointWaveform_Time* FloPointWaveform_Time::default_instance_ = NULL;

FloPointWaveform_Time* FloPointWaveform_Time::New() const {
  return new FloPointWaveform_Time;
}

void FloPointWaveform_Time::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FloPointWaveform_Time*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_point_, time_source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointWaveform_Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointWaveform.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_point_)));
          set_has_time_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_source;
        break;
      }

      // required .flopointpb.FloPointWaveform.TimeSource time_source = 2;
      case 2: {
        if (tag == 16) {
         parse_time_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flopointpb::FloPointWaveform_TimeSource_IsValid(value)) {
            set_time_source(static_cast< ::flopointpb::FloPointWaveform_TimeSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointWaveform.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointWaveform.Time)
  return false;
#undef DO_
}

void FloPointWaveform_Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointWaveform.Time)
  // required int64 time_point = 1;
  if (has_time_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_point(), output);
  }

  // required .flopointpb.FloPointWaveform.TimeSource time_source = 2;
  if (has_time_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->time_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointWaveform.Time)
}

::google::protobuf::uint8* FloPointWaveform_Time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointWaveform.Time)
  // required int64 time_point = 1;
  if (has_time_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_point(), target);
  }

  // required .flopointpb.FloPointWaveform.TimeSource time_source = 2;
  if (has_time_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->time_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointWaveform.Time)
  return target;
}

int FloPointWaveform_Time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time_point = 1;
    if (has_time_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_point());
    }

    // required .flopointpb.FloPointWaveform.TimeSource time_source = 2;
    if (has_time_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointWaveform_Time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointWaveform_Time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointWaveform_Time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointWaveform_Time::MergeFrom(const FloPointWaveform_Time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_point()) {
      set_time_point(from.time_point());
    }
    if (from.has_time_source()) {
      set_time_source(from.time_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointWaveform_Time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointWaveform_Time::CopyFrom(const FloPointWaveform_Time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointWaveform_Time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FloPointWaveform_Time::Swap(FloPointWaveform_Time* other) {
  if (other != this) {
    std::swap(time_point_, other->time_point_);
    std::swap(time_source_, other->time_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointWaveform_Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointWaveform_Time_descriptor_;
  metadata.reflection = FloPointWaveform_Time_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointWaveform_Temp::kTempPointFieldNumber;
const int FloPointWaveform_Temp::kTempSourceFieldNumber;
#endif  // !_MSC_VER

FloPointWaveform_Temp::FloPointWaveform_Temp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointWaveform.Temp)
}

void FloPointWaveform_Temp::InitAsDefaultInstance() {
}

FloPointWaveform_Temp::FloPointWaveform_Temp(const FloPointWaveform_Temp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointWaveform.Temp)
}

void FloPointWaveform_Temp::SharedCtor() {
  _cached_size_ = 0;
  temp_point_ = 0;
  temp_source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointWaveform_Temp::~FloPointWaveform_Temp() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointWaveform.Temp)
  SharedDtor();
}

void FloPointWaveform_Temp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointWaveform_Temp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointWaveform_Temp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_Temp_descriptor_;
}

const FloPointWaveform_Temp& FloPointWaveform_Temp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointWaveform_Temp* FloPointWaveform_Temp::default_instance_ = NULL;

FloPointWaveform_Temp* FloPointWaveform_Temp::New() const {
  return new FloPointWaveform_Temp;
}

void FloPointWaveform_Temp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FloPointWaveform_Temp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(temp_point_, temp_source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointWaveform_Temp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointWaveform.Temp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 temp_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temp_point_)));
          set_has_temp_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_temp_source;
        break;
      }

      // required .flopointpb.FloPointWaveform.TempSource temp_source = 2;
      case 2: {
        if (tag == 16) {
         parse_temp_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flopointpb::FloPointWaveform_TempSource_IsValid(value)) {
            set_temp_source(static_cast< ::flopointpb::FloPointWaveform_TempSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointWaveform.Temp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointWaveform.Temp)
  return false;
#undef DO_
}

void FloPointWaveform_Temp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointWaveform.Temp)
  // required int32 temp_point = 1;
  if (has_temp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->temp_point(), output);
  }

  // required .flopointpb.FloPointWaveform.TempSource temp_source = 2;
  if (has_temp_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->temp_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointWaveform.Temp)
}

::google::protobuf::uint8* FloPointWaveform_Temp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointWaveform.Temp)
  // required int32 temp_point = 1;
  if (has_temp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->temp_point(), target);
  }

  // required .flopointpb.FloPointWaveform.TempSource temp_source = 2;
  if (has_temp_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->temp_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointWaveform.Temp)
  return target;
}

int FloPointWaveform_Temp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 temp_point = 1;
    if (has_temp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temp_point());
    }

    // required .flopointpb.FloPointWaveform.TempSource temp_source = 2;
    if (has_temp_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->temp_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointWaveform_Temp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointWaveform_Temp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointWaveform_Temp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointWaveform_Temp::MergeFrom(const FloPointWaveform_Temp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temp_point()) {
      set_temp_point(from.temp_point());
    }
    if (from.has_temp_source()) {
      set_temp_source(from.temp_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointWaveform_Temp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointWaveform_Temp::CopyFrom(const FloPointWaveform_Temp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointWaveform_Temp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FloPointWaveform_Temp::Swap(FloPointWaveform_Temp* other) {
  if (other != this) {
    std::swap(temp_point_, other->temp_point_);
    std::swap(temp_source_, other->temp_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointWaveform_Temp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointWaveform_Temp_descriptor_;
  metadata.reflection = FloPointWaveform_Temp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointWaveform_Volt::kVoltPointFieldNumber;
const int FloPointWaveform_Volt::kVoltSourceFieldNumber;
#endif  // !_MSC_VER

FloPointWaveform_Volt::FloPointWaveform_Volt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointWaveform.Volt)
}

void FloPointWaveform_Volt::InitAsDefaultInstance() {
}

FloPointWaveform_Volt::FloPointWaveform_Volt(const FloPointWaveform_Volt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointWaveform.Volt)
}

void FloPointWaveform_Volt::SharedCtor() {
  _cached_size_ = 0;
  volt_point_ = 0;
  volt_source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointWaveform_Volt::~FloPointWaveform_Volt() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointWaveform.Volt)
  SharedDtor();
}

void FloPointWaveform_Volt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointWaveform_Volt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointWaveform_Volt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_Volt_descriptor_;
}

const FloPointWaveform_Volt& FloPointWaveform_Volt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointWaveform_Volt* FloPointWaveform_Volt::default_instance_ = NULL;

FloPointWaveform_Volt* FloPointWaveform_Volt::New() const {
  return new FloPointWaveform_Volt;
}

void FloPointWaveform_Volt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FloPointWaveform_Volt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(volt_point_, volt_source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointWaveform_Volt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointWaveform.Volt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 volt_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volt_point_)));
          set_has_volt_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_volt_source;
        break;
      }

      // required .flopointpb.FloPointWaveform.VoltSource volt_source = 2;
      case 2: {
        if (tag == 16) {
         parse_volt_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flopointpb::FloPointWaveform_VoltSource_IsValid(value)) {
            set_volt_source(static_cast< ::flopointpb::FloPointWaveform_VoltSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointWaveform.Volt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointWaveform.Volt)
  return false;
#undef DO_
}

void FloPointWaveform_Volt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointWaveform.Volt)
  // required int32 volt_point = 1;
  if (has_volt_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->volt_point(), output);
  }

  // required .flopointpb.FloPointWaveform.VoltSource volt_source = 2;
  if (has_volt_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->volt_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointWaveform.Volt)
}

::google::protobuf::uint8* FloPointWaveform_Volt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointWaveform.Volt)
  // required int32 volt_point = 1;
  if (has_volt_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->volt_point(), target);
  }

  // required .flopointpb.FloPointWaveform.VoltSource volt_source = 2;
  if (has_volt_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->volt_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointWaveform.Volt)
  return target;
}

int FloPointWaveform_Volt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 volt_point = 1;
    if (has_volt_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volt_point());
    }

    // required .flopointpb.FloPointWaveform.VoltSource volt_source = 2;
    if (has_volt_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->volt_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointWaveform_Volt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointWaveform_Volt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointWaveform_Volt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointWaveform_Volt::MergeFrom(const FloPointWaveform_Volt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volt_point()) {
      set_volt_point(from.volt_point());
    }
    if (from.has_volt_source()) {
      set_volt_source(from.volt_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointWaveform_Volt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointWaveform_Volt::CopyFrom(const FloPointWaveform_Volt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointWaveform_Volt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FloPointWaveform_Volt::Swap(FloPointWaveform_Volt* other) {
  if (other != this) {
    std::swap(volt_point_, other->volt_point_);
    std::swap(volt_source_, other->volt_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointWaveform_Volt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointWaveform_Volt_descriptor_;
  metadata.reflection = FloPointWaveform_Volt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointWaveform_CompileInfo::kCompilerFieldNumber;
const int FloPointWaveform_CompileInfo::kDateFieldNumber;
const int FloPointWaveform_CompileInfo::kOperatingSystemFieldNumber;
#endif  // !_MSC_VER

FloPointWaveform_CompileInfo::FloPointWaveform_CompileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointWaveform.CompileInfo)
}

void FloPointWaveform_CompileInfo::InitAsDefaultInstance() {
}

FloPointWaveform_CompileInfo::FloPointWaveform_CompileInfo(const FloPointWaveform_CompileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointWaveform.CompileInfo)
}

void FloPointWaveform_CompileInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  compiler_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operating_system_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointWaveform_CompileInfo::~FloPointWaveform_CompileInfo() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointWaveform.CompileInfo)
  SharedDtor();
}

void FloPointWaveform_CompileInfo::SharedDtor() {
  if (compiler_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compiler_;
  }
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (operating_system_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operating_system_;
  }
  if (this != default_instance_) {
  }
}

void FloPointWaveform_CompileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointWaveform_CompileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_CompileInfo_descriptor_;
}

const FloPointWaveform_CompileInfo& FloPointWaveform_CompileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointWaveform_CompileInfo* FloPointWaveform_CompileInfo::default_instance_ = NULL;

FloPointWaveform_CompileInfo* FloPointWaveform_CompileInfo::New() const {
  return new FloPointWaveform_CompileInfo;
}

void FloPointWaveform_CompileInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_compiler()) {
      if (compiler_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compiler_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_->clear();
      }
    }
    if (has_operating_system()) {
      if (operating_system_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operating_system_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointWaveform_CompileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointWaveform.CompileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string compiler = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compiler()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compiler().data(), this->compiler().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compiler");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // optional string date = 2;
      case 2: {
        if (tag == 18) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operating_system;
        break;
      }

      // optional string operating_system = 3;
      case 3: {
        if (tag == 26) {
         parse_operating_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operating_system()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operating_system().data(), this->operating_system().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "operating_system");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointWaveform.CompileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointWaveform.CompileInfo)
  return false;
#undef DO_
}

void FloPointWaveform_CompileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointWaveform.CompileInfo)
  // required string compiler = 1;
  if (has_compiler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compiler().data(), this->compiler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compiler");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->compiler(), output);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // optional string operating_system = 3;
  if (has_operating_system()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operating_system().data(), this->operating_system().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operating_system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operating_system(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointWaveform.CompileInfo)
}

::google::protobuf::uint8* FloPointWaveform_CompileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointWaveform.CompileInfo)
  // required string compiler = 1;
  if (has_compiler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compiler().data(), this->compiler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compiler");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->compiler(), target);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // optional string operating_system = 3;
  if (has_operating_system()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operating_system().data(), this->operating_system().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operating_system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operating_system(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointWaveform.CompileInfo)
  return target;
}

int FloPointWaveform_CompileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string compiler = 1;
    if (has_compiler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compiler());
    }

    // optional string date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string operating_system = 3;
    if (has_operating_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operating_system());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointWaveform_CompileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointWaveform_CompileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointWaveform_CompileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointWaveform_CompileInfo::MergeFrom(const FloPointWaveform_CompileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compiler()) {
      set_compiler(from.compiler());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_operating_system()) {
      set_operating_system(from.operating_system());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointWaveform_CompileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointWaveform_CompileInfo::CopyFrom(const FloPointWaveform_CompileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointWaveform_CompileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FloPointWaveform_CompileInfo::Swap(FloPointWaveform_CompileInfo* other) {
  if (other != this) {
    std::swap(compiler_, other->compiler_);
    std::swap(date_, other->date_);
    std::swap(operating_system_, other->operating_system_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointWaveform_CompileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointWaveform_CompileInfo_descriptor_;
  metadata.reflection = FloPointWaveform_CompileInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointWaveform_Count::kCountValueFieldNumber;
const int FloPointWaveform_Count::kCountTypeFieldNumber;
#endif  // !_MSC_VER

FloPointWaveform_Count::FloPointWaveform_Count()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointWaveform.Count)
}

void FloPointWaveform_Count::InitAsDefaultInstance() {
}

FloPointWaveform_Count::FloPointWaveform_Count(const FloPointWaveform_Count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointWaveform.Count)
}

void FloPointWaveform_Count::SharedCtor() {
  _cached_size_ = 0;
  count_value_ = 0;
  count_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointWaveform_Count::~FloPointWaveform_Count() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointWaveform.Count)
  SharedDtor();
}

void FloPointWaveform_Count::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointWaveform_Count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointWaveform_Count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_Count_descriptor_;
}

const FloPointWaveform_Count& FloPointWaveform_Count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointWaveform_Count* FloPointWaveform_Count::default_instance_ = NULL;

FloPointWaveform_Count* FloPointWaveform_Count::New() const {
  return new FloPointWaveform_Count;
}

void FloPointWaveform_Count::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FloPointWaveform_Count*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_value_, count_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointWaveform_Count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointWaveform.Count)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_value_)));
          set_has_count_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count_type;
        break;
      }

      // required .flopointpb.FloPointWaveform.CountType count_type = 2;
      case 2: {
        if (tag == 16) {
         parse_count_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flopointpb::FloPointWaveform_CountType_IsValid(value)) {
            set_count_type(static_cast< ::flopointpb::FloPointWaveform_CountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointWaveform.Count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointWaveform.Count)
  return false;
#undef DO_
}

void FloPointWaveform_Count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointWaveform.Count)
  // required int32 count_value = 1;
  if (has_count_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count_value(), output);
  }

  // required .flopointpb.FloPointWaveform.CountType count_type = 2;
  if (has_count_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->count_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointWaveform.Count)
}

::google::protobuf::uint8* FloPointWaveform_Count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointWaveform.Count)
  // required int32 count_value = 1;
  if (has_count_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count_value(), target);
  }

  // required .flopointpb.FloPointWaveform.CountType count_type = 2;
  if (has_count_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->count_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointWaveform.Count)
  return target;
}

int FloPointWaveform_Count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count_value = 1;
    if (has_count_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_value());
    }

    // required .flopointpb.FloPointWaveform.CountType count_type = 2;
    if (has_count_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->count_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointWaveform_Count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointWaveform_Count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointWaveform_Count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointWaveform_Count::MergeFrom(const FloPointWaveform_Count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_value()) {
      set_count_value(from.count_value());
    }
    if (from.has_count_type()) {
      set_count_type(from.count_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointWaveform_Count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointWaveform_Count::CopyFrom(const FloPointWaveform_Count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointWaveform_Count::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FloPointWaveform_Count::Swap(FloPointWaveform_Count* other) {
  if (other != this) {
    std::swap(count_value_, other->count_value_);
    std::swap(count_type_, other->count_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointWaveform_Count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointWaveform_Count_descriptor_;
  metadata.reflection = FloPointWaveform_Count_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointWaveform::kNameFieldNumber;
const int FloPointWaveform::kWaveformFieldNumber;
const int FloPointWaveform::kJitterFieldNumber;
const int FloPointWaveform::kTimeReadingFieldNumber;
const int FloPointWaveform::kTempReadingFieldNumber;
const int FloPointWaveform::kVoltReadingFieldNumber;
const int FloPointWaveform::kCompileInfoFieldNumber;
const int FloPointWaveform::kDipswitchesFieldNumber;
const int FloPointWaveform::kCountFieldNumber;
#endif  // !_MSC_VER

FloPointWaveform::FloPointWaveform()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointWaveform)
}

void FloPointWaveform::InitAsDefaultInstance() {
  waveform_ = const_cast< ::flopointpb::FloPointWaveform_Waveform*>(&::flopointpb::FloPointWaveform_Waveform::default_instance());
  jitter_ = const_cast< ::flopointpb::FloPointWaveform_Jitter*>(&::flopointpb::FloPointWaveform_Jitter::default_instance());
  compile_info_ = const_cast< ::flopointpb::FloPointWaveform_CompileInfo*>(&::flopointpb::FloPointWaveform_CompileInfo::default_instance());
}

FloPointWaveform::FloPointWaveform(const FloPointWaveform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointWaveform)
}

void FloPointWaveform::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waveform_ = NULL;
  jitter_ = NULL;
  compile_info_ = NULL;
  dipswitches_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointWaveform::~FloPointWaveform() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointWaveform)
  SharedDtor();
}

void FloPointWaveform::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete waveform_;
    delete jitter_;
    delete compile_info_;
  }
}

void FloPointWaveform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointWaveform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointWaveform_descriptor_;
}

const FloPointWaveform& FloPointWaveform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointWaveform* FloPointWaveform::default_instance_ = NULL;

FloPointWaveform* FloPointWaveform::New() const {
  return new FloPointWaveform;
}

void FloPointWaveform::Clear() {
  if (_has_bits_[0 / 32] & 199) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_waveform()) {
      if (waveform_ != NULL) waveform_->::flopointpb::FloPointWaveform_Waveform::Clear();
    }
    if (has_jitter()) {
      if (jitter_ != NULL) jitter_->::flopointpb::FloPointWaveform_Jitter::Clear();
    }
    if (has_compile_info()) {
      if (compile_info_ != NULL) compile_info_->::flopointpb::FloPointWaveform_CompileInfo::Clear();
    }
    dipswitches_ = 0;
  }
  time_reading_.Clear();
  temp_reading_.Clear();
  volt_reading_.Clear();
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointWaveform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointWaveform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_waveform;
        break;
      }

      // required .flopointpb.FloPointWaveform.Waveform waveform = 2;
      case 2: {
        if (tag == 18) {
         parse_waveform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waveform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_jitter;
        break;
      }

      // optional .flopointpb.FloPointWaveform.Jitter jitter = 3;
      case 3: {
        if (tag == 26) {
         parse_jitter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jitter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time_reading;
        break;
      }

      // repeated .flopointpb.FloPointWaveform.Time time_reading = 4;
      case 4: {
        if (tag == 34) {
         parse_time_reading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time_reading()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time_reading;
        if (input->ExpectTag(42)) goto parse_temp_reading;
        break;
      }

      // repeated .flopointpb.FloPointWaveform.Temp temp_reading = 5;
      case 5: {
        if (tag == 42) {
         parse_temp_reading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_temp_reading()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_temp_reading;
        if (input->ExpectTag(50)) goto parse_volt_reading;
        break;
      }

      // repeated .flopointpb.FloPointWaveform.Volt volt_reading = 6;
      case 6: {
        if (tag == 50) {
         parse_volt_reading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volt_reading()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_volt_reading;
        if (input->ExpectTag(58)) goto parse_compile_info;
        break;
      }

      // optional .flopointpb.FloPointWaveform.CompileInfo compile_info = 7;
      case 7: {
        if (tag == 58) {
         parse_compile_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compile_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dipswitches;
        break;
      }

      // optional int32 dipswitches = 8;
      case 8: {
        if (tag == 64) {
         parse_dipswitches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dipswitches_)));
          set_has_dipswitches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_count;
        break;
      }

      // repeated .flopointpb.FloPointWaveform.Count count = 9;
      case 9: {
        if (tag == 74) {
         parse_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointWaveform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointWaveform)
  return false;
#undef DO_
}

void FloPointWaveform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointWaveform)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .flopointpb.FloPointWaveform.Waveform waveform = 2;
  if (has_waveform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waveform(), output);
  }

  // optional .flopointpb.FloPointWaveform.Jitter jitter = 3;
  if (has_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->jitter(), output);
  }

  // repeated .flopointpb.FloPointWaveform.Time time_reading = 4;
  for (int i = 0; i < this->time_reading_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->time_reading(i), output);
  }

  // repeated .flopointpb.FloPointWaveform.Temp temp_reading = 5;
  for (int i = 0; i < this->temp_reading_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->temp_reading(i), output);
  }

  // repeated .flopointpb.FloPointWaveform.Volt volt_reading = 6;
  for (int i = 0; i < this->volt_reading_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->volt_reading(i), output);
  }

  // optional .flopointpb.FloPointWaveform.CompileInfo compile_info = 7;
  if (has_compile_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->compile_info(), output);
  }

  // optional int32 dipswitches = 8;
  if (has_dipswitches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dipswitches(), output);
  }

  // repeated .flopointpb.FloPointWaveform.Count count = 9;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointWaveform)
}

::google::protobuf::uint8* FloPointWaveform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointWaveform)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .flopointpb.FloPointWaveform.Waveform waveform = 2;
  if (has_waveform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->waveform(), target);
  }

  // optional .flopointpb.FloPointWaveform.Jitter jitter = 3;
  if (has_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->jitter(), target);
  }

  // repeated .flopointpb.FloPointWaveform.Time time_reading = 4;
  for (int i = 0; i < this->time_reading_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->time_reading(i), target);
  }

  // repeated .flopointpb.FloPointWaveform.Temp temp_reading = 5;
  for (int i = 0; i < this->temp_reading_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->temp_reading(i), target);
  }

  // repeated .flopointpb.FloPointWaveform.Volt volt_reading = 6;
  for (int i = 0; i < this->volt_reading_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->volt_reading(i), target);
  }

  // optional .flopointpb.FloPointWaveform.CompileInfo compile_info = 7;
  if (has_compile_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->compile_info(), target);
  }

  // optional int32 dipswitches = 8;
  if (has_dipswitches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dipswitches(), target);
  }

  // repeated .flopointpb.FloPointWaveform.Count count = 9;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointWaveform)
  return target;
}

int FloPointWaveform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .flopointpb.FloPointWaveform.Waveform waveform = 2;
    if (has_waveform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waveform());
    }

    // optional .flopointpb.FloPointWaveform.Jitter jitter = 3;
    if (has_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jitter());
    }

    // optional .flopointpb.FloPointWaveform.CompileInfo compile_info = 7;
    if (has_compile_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compile_info());
    }

    // optional int32 dipswitches = 8;
    if (has_dipswitches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dipswitches());
    }

  }
  // repeated .flopointpb.FloPointWaveform.Time time_reading = 4;
  total_size += 1 * this->time_reading_size();
  for (int i = 0; i < this->time_reading_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time_reading(i));
  }

  // repeated .flopointpb.FloPointWaveform.Temp temp_reading = 5;
  total_size += 1 * this->temp_reading_size();
  for (int i = 0; i < this->temp_reading_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->temp_reading(i));
  }

  // repeated .flopointpb.FloPointWaveform.Volt volt_reading = 6;
  total_size += 1 * this->volt_reading_size();
  for (int i = 0; i < this->volt_reading_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volt_reading(i));
  }

  // repeated .flopointpb.FloPointWaveform.Count count = 9;
  total_size += 1 * this->count_size();
  for (int i = 0; i < this->count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointWaveform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointWaveform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointWaveform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointWaveform::MergeFrom(const FloPointWaveform& from) {
  GOOGLE_CHECK_NE(&from, this);
  time_reading_.MergeFrom(from.time_reading_);
  temp_reading_.MergeFrom(from.temp_reading_);
  volt_reading_.MergeFrom(from.volt_reading_);
  count_.MergeFrom(from.count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_waveform()) {
      mutable_waveform()->::flopointpb::FloPointWaveform_Waveform::MergeFrom(from.waveform());
    }
    if (from.has_jitter()) {
      mutable_jitter()->::flopointpb::FloPointWaveform_Jitter::MergeFrom(from.jitter());
    }
    if (from.has_compile_info()) {
      mutable_compile_info()->::flopointpb::FloPointWaveform_CompileInfo::MergeFrom(from.compile_info());
    }
    if (from.has_dipswitches()) {
      set_dipswitches(from.dipswitches());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointWaveform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointWaveform::CopyFrom(const FloPointWaveform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointWaveform::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->time_reading())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->temp_reading())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->volt_reading())) return false;
  if (has_compile_info()) {
    if (!this->compile_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->count())) return false;
  return true;
}

void FloPointWaveform::Swap(FloPointWaveform* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(waveform_, other->waveform_);
    std::swap(jitter_, other->jitter_);
    time_reading_.Swap(&other->time_reading_);
    temp_reading_.Swap(&other->temp_reading_);
    volt_reading_.Swap(&other->volt_reading_);
    std::swap(compile_info_, other->compile_info_);
    std::swap(dipswitches_, other->dipswitches_);
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointWaveform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointWaveform_descriptor_;
  metadata.reflection = FloPointWaveform_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace flopointpb

// @@protoc_insertion_point(global_scope)
